import { Alert, Box, Button, CircularProgress, Grid } from '@mui/material';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Footer from '../components/Footer';
import Header from '../components/Header';
import Input from '../components/Input';
import InputPrice from '../components/InputPrice';
import SelectColor from '../components/SelectColor';
import SelectDate from '../components/SelectDate';
import { useRouter } from 'next/dist/client/router';
import styles from '../styles/Add.module.css';
import api from '../lib/api';
import crypto from 'crypto';
import moment from 'moment';
import 'moment/min/locales.min';

export default function Add(props) {
    moment().locale('pt-br');
    const [phone, setPhone] = useState({
        code: [crypto.randomBytes(256).toString('hex').slice(0, 8)],
    });
    const [message, setMessage] = useState({
        msg: 'Phone criado com Sucesso!',
        type: 'success',
    });

    const [loaded, setLoaded] = useState(false);
    const [loading, setLoading] = useState(false);

    const router = useRouter();

    async function handlePhone({ name, value }) {
        setPhone({ ...phone, [name]: value });
    }

    async function handleSubmit(e) {
        e.preventDefault();
        setLoaded(false);
        setLoading(true);
        try {
            if (!phone.date) {
                throw new Error('Data de Inicio é Obrigatorio!');
            }
            if (!phone.endDate) {
                throw new Error('Data de Termino é Obrigatorio!');
            }

            if (phone.model.length < 2 || phone.model.length > 255) {
                throw new Error(
                    'Modelo deve ter no mínimo 2 caracteres e no maximo 255!'
                );
            }

            if (phone.brand.length < 2 || phone.brand.length > 255) {
                throw new Error(
                    'Marca deve ter no mínimo 2 caracteres e no maximo 255!'
                );
            }

            if (
                moment
                    .duration(moment(phone.endDate).diff(moment(phone.date)))
                    .asDays() <= 0
            ) {
                throw new Error(
                    'A data de Término deve ser maior que a data de Inicio!'
                );
            }

            phone.date = moment(phone.date).format('L');
            phone.endDate = moment(phone.endDate).format('L');

            await api.post(`/phone`, phone);
            setLoaded(true);
            setLoading(false);
            setMessage({
                msg: 'Phone criado com Sucesso!',
                type: 'success',
            });
            setTimeout(() => {
                router.push({ pathname: '/' });
            }, 2000);
        } catch (e) {
            setLoading(false);
            setLoaded(true);
            setMessage({
                msg: `Erro ao atualizar o telefone!: ${e.message}`,
                type: 'error',
            });
        }
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>M Celulares</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <main className={styles.main}>
                <div className={styles.form_control}>
                    <h1>Detalhes do Produto</h1>

                    <Box component="form" onSubmit={handleSubmit}>
                        <Grid container spacing={3}>
                            {loaded && (
                                <Grid item xs={12}>
                                    <Alert severity={message.type}>
                                        {message.msg}
                                    </Alert>
                                </Grid>
                            )}
                            <Grid item xs={6}>
                                <Input
                                    label="Modelo"
                                    name="model"
                                    defaultValue={phone.model}
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <Input
                                    label="Marca"
                                    name="brand"
                                    defaultValue={phone.brand}
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <SelectColor
                                    label="Cor"
                                    name="color"
                                    defaultValue={phone.color}
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <InputPrice
                                    label="Preço"
                                    name="price"
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <SelectDate
                                    label="Inicio das Vendas"
                                    name="date"
                                    defaultValue={phone.date}
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <SelectDate
                                    label="Fim das Vendas"
                                    name="endDate"
                                    handleOnChange={handlePhone}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <Grid container justifyContent="flex-end">
                                    <Button
                                        href="/"
                                        variant="contained"
                                        sx={{
                                            marginLeft: '20px',
                                            backgroundColor: '#DAE3ED',
                                        }}
                                    >
                                        Voltar
                                    </Button>
                                    <Button
                                        type="submit"
                                        variant="contained"
                                        sx={{
                                            marginLeft: '20px',
                                            backgroundColor: '#DAE3ED',
                                        }}
                                    >
                                        Salvar
                                    </Button>
                                </Grid>
                                {loading && (
                                    <Grid item xs={12}>
                                        <Grid container justifyContent="center">
                                            <CircularProgress />
                                        </Grid>
                                    </Grid>
                                )}
                            </Grid>
                        </Grid>
                    </Box>
                </div>
            </main>

            <Footer />
        </div>
    );
}
